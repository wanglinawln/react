{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","add","target","value","setState","name","handleChange","parseInt","bind","state","a","b","c","ref","inp","onChange","this","type","onKeyDown","onClick","console","log","focus","refs","Component","Todoing","index","del","todo","map","item","key","delItem","defaultProps","Todolist","addItem","data","splice","ReactDOM","render","document","getElementById"],"mappings":"oQAGqBA,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAY,SAACC,GAEM,KAAZA,EAAEC,UAED,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,OACxB,EAAKC,SAAL,eACKN,EAAEI,OAAOG,KAAM,OAff,EAqBbC,aAAa,SAACR,GACV,EAAKM,SAAL,eACKN,EAAEI,OAAOG,KAAME,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UArB5D,EAAKN,YAAY,EAAKA,YAAYW,KAAjB,gBACjB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,sEA2BH,IAAD,OACL,OACI,6BACI,2BAAOC,IAAK,SAACC,GAAO,EAAKJ,EAAEI,GAAMT,KAAK,IAAIU,SAAUC,KAAKV,aAAeH,MAAOa,KAAKP,MAAMC,EAAGO,KAAK,OAAOC,UAAWF,KAAKnB,cAD7H,IAGI,2BAAOgB,IAAI,IAAIR,KAAK,IAAIU,SAAUC,KAAKV,aAAeH,MAAOa,KAAKP,MAAME,EAAGM,KAAK,OAAOC,UAAWF,KAAKnB,cAH3G,IAKI,2BAAOQ,KAAK,IAAIU,SAAUC,KAAKV,aAAeH,MAAOa,KAAKP,MAAMG,EAAGK,KAAK,OAAOC,UAAWF,KAAKnB,cALnG,IAOI,2BAAImB,KAAKP,MAAMC,EAAEM,KAAKP,MAAME,EAAEK,KAAKP,MAAMG,GAEzC,2BAAOK,KAAK,OAAOJ,IAAK,SAACC,GAAO,EAAKA,IAAIA,KACzC,4BAAQK,QAAS,WAAKC,QAAQC,IAAI,EAAKZ,MAAMC,EAAE,EAAKD,MAAME,EAAE,EAAKF,MAAMG,EAAE,EAAKE,OAA9E,mB,0CAMRM,QAAQC,IAAIL,MACZA,KAAKN,EAAEY,QACPN,KAAKO,KAAKZ,EAAEW,Y,GAhDmBE,aCClBC,E,gLACTC,EAAM5B,GACVkB,KAAKhB,MAAM2B,IAAID,EAAM5B,K,+BAEf,IAAD,OACA8B,EAAMZ,KAAKhB,MAAX4B,KACKZ,KAAKhB,MAAV2B,IACL,OACI,4BAEQC,EAAKC,KAAI,SAACC,EAAKJ,GAAN,OACL,wBAAIK,IAAKL,GACJI,EADL,MACa,4BAAQX,QAAS,EAAKa,QAAQxB,KAAK,EAAKkB,IAAxC,yB,GAZAF,aA8BrCC,EAAQQ,aAAa,CACjBL,KAAK,CAAC,EAAE,EAAE,EAAE,I,IC/BKM,E,YACjB,aAAc,IAAD,8BACT,+CAKJC,QAAQ,SAACC,GAGL,EAAKhC,SAAS,CACXwB,KAAK,GAAD,mBAAK,EAAKnB,MAAMmB,MAAhB,CAAqBQ,OAVnB,EAabJ,QAAQ,SAACN,EAAM5B,GAGXsB,QAAQC,IAAIK,EAAM5B,GAClB,IAAI8B,EAAK,YAAI,EAAKnB,MAAMmB,MACxBA,EAAKS,OAAOX,EAAM,GAOlB,EAAKtB,UAAS,SAACK,EAAMT,GAEjB,OADAoB,QAAQC,IAAIZ,EAAMmB,MACX,CACHA,KAAKA,OA1Bb,EAAKnB,MAAM,CACPmB,KAAK,IAHA,E,sEAiCT,OACI,6BACI,kBAAC,EAAD,CAAW3B,IAAKe,KAAKmB,UACrB,kBAAC,EAAD,CAASP,KAAMZ,KAAKP,MAAMmB,KAAMD,IAAKX,KAAKgB,e,GArCpBR,a,MCMtCc,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.acffe72c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）但写法相对麻烦\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);\r\n        this.state={\r\n            a:\"\",\r\n            b:\"\",\r\n            c:\"\"\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        //用箭头函数绑定this，或者用bind\r\n        if(e.keyCode===13){\r\n            // console.log(e.target.value);\r\n            this.props.add(e.target.value);\r\n            this.setState({\r\n                [e.target.name]:\"\"\r\n            })\r\n            // e.target.value=\"\";\r\n        }\r\n        \r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===\"\"?0:e.target.value),\r\n            // [e.target.value]:\"\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange}  value={this.state.a} type=\"text\" onKeyDown={this.handleInput}></input>\r\n                +\r\n                <input ref=\"b\" name=\"b\" onChange={this.handleChange}  value={this.state.b} type=\"text\" onKeyDown={this.handleInput}></input>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange}  value={this.state.c} type=\"text\" onKeyDown={this.handleInput}></input>                \r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/*非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input type=\"text\" ref={(inp)=>{this.inp=inp}}></input>\r\n                <button onClick={()=>{console.log(this.state.a,this.state.b,this.state.c,this.inp)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n    //在render之后执行\r\n    componentDidMount(){\r\n        console.log(this);\r\n        this.a.focus();\r\n        this.refs.b.focus();\r\n    }\r\n}\r\n\r\n/**\r\n * 受控组件：\r\n * 1.给input标签添加value属性，赋值为state的值\r\n * 2.给input标签绑定onChange事件，在事件处理函数中setState\r\n * 3.一个事件处理函数控制多个表单元素时，给input标签加上name属性，事件处理函数中写:\r\n * setState({[e.target.name]:e.target.value})\r\n */","//快捷键rcc\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    delItem(index,e){\r\n        this.props.del(index,e);\r\n    }\r\n    render() {\r\n        var {todo}=this.props;\r\n        var {del}=this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,index)=>\r\n                        <li key={index}>\r\n                            {item}---<button onClick={this.delItem.bind(this,index)}>删除</button>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\n//检查todo传进来的是不是array类型，del是不是function类型，如果不是就会报错\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n    // 一个 React 元素。\r\n    //ele：PropTypes.element,\r\n}\r\n\r\n//设置默认属性值\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4]\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[]\r\n        }\r\n    }\r\n    addItem=(data)=>{\r\n        // console.log(data);\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n           todo:[...this.state.todo,data]//数组构造器\r\n        })\r\n    }\r\n    delItem=(index,e)=>{\r\n        //1.不能直接改变或处理state，通过setState改变\r\n        //2.setState是异步执行的，只会改变setState里写的属性值，没写的不改变\r\n        console.log(index,e);\r\n        let todo=[...this.state.todo];\r\n        todo.splice(index,1);//删除元素，从index位置开始，删除n个元素\r\n        // this.setState({\r\n        //     todo:todo\r\n        // },()=>{console.log(this.state.todo)})\r\n\r\n        //在setState里获取state可能会出错，不是你想要的值，\r\n        //可以像下面那样，把第一个参数写成函数，函数的第一个参数state是发生改变之前的state\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);//输出改变前的值\r\n            return {\r\n                todo:todo\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing todo={this.state.todo} del={this.delItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Todolist from \"./Todolist/Todolist.js\"\nimport './index.css';\n\n/******************************* */\n//组件交互\n//父组件---->子组件:调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件---->父组件:\n\nReactDOM.render(<Todolist/>,document.getElementById(\"root\"));\n\n\n\n\n"],"sourceRoot":""}